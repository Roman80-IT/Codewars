//! ================================================================================================
//?        join()    -  конкатенація
//* Рядок const result = filteredBukvs.join(""); виконує об'єднання (конкатенацію) всіх елементів масиву filteredBukvs у одну рядкову значення.
//*  В цьому випадку, елементи масиву filteredBukvs будуть об'єднані без роздільників, оскільки пустий рядок "" передається в метод join.
//*          якщо масив filteredCharacters містить значення ['T', 'h', 's', ' ', 'w', 'b', 's', 't'],
//*          то після виконання filteredCharacters.join("") отримаємо рядок "Ths wbst".
//! ================================================================================================
//?        Регулярний вираз /[AEIOUaeiou]/
//* представляє собою шаблон, який визначає набір символів, які співпадають з будь-якими буквами у верхньому та нижньому регістрах.
//* Цей регулярний вираз використовується в методах, які працюють з рядками: таких як replace, match, test, split, exec, search

//*    '/.../'  -  синтаксичні обрамлення для вказання регулярного виразу у JS, - це спосіб визначення регулярних виразів
//*   [AEIOUaeiou] - набір символів, заключених у квадратні дужки [].
//*   g: Це флаг глоб  -  вказує на глобальний пошук. Використання флагу g дозволяє знайти всі збіги регулярного виразу, а не зупинятися після першого збігу.
//*        Флаг g використовується, коли вам потрібно знайти всі входження замість першого збігу.

//? search: Пошук входження регулярного виразу у рядку.
// const str = "Hello, world!";
// const pattern = /world/;
// const result = str.search(pattern); //     поверне 7

//? match: Повертає масив зі збігами регулярного виразу у рядку.
// const str = "Hello, world!";
// const pattern = /l/;
// const result = str.match(pattern); //      поверне ['l', 'l', 'l']

//? replace: Заміна збігів регулярного виразу у рядку на нові значення.
// const str = "Hello, world!";
// const pattern = /world/;
// const replacement = "universe";
// const result = str.replace(pattern, replacement); // поверне 'Hello, universe!'

//? test: Перевірка, чи є збіги регулярного виразу у рядку.
// const str = "Hello, world!";
// const pattern = /world/;
// const result = pattern.test(str); //        поверне true
//! ================================================================================================
//?   /^\d+$/  - Регулярний вираз, що відповідає лише цифрам
//*    ^ - це якорь, що вказує на початок рядка.
//        Символ ^ позначає початок рядка. Таким чином, вираз гарантує, що весь рядок починається з цифри.
//        Якщо будь - який інший символ або пробіл з'явиться перед цифрою, вираз не збігається.
//*    \d - це метасимвол, який відповідає будь-якій цифрі (0-9).
//*    + - це квантифікатор, що вказує, що попередній символ \d повинен з'явитися принаймні один раз або більше.
//*    $ - це якорь, що вказує на кінець рядка.
//        Символ $ позначає кінець рядка. Це означає, що рядок повинен закінчуватися цифрою.
//        Якщо будь - який символ або пробіл з'явиться після останньої цифри, вираз не збігається.
//! ================================================================================================
//* Інші спеціальні символи та патерни, які можна використовувати в регулярних виразах, наприклад:

//*    .: Збігає будь-який символ, крім нового рядка
//         const pattern = /h.t/; // Збігає з "hat", "hot", "hit" і т.д.
//         console.log(pattern.test("hat")); // true
//         console.log(pattern.test("hot")); // true
//         console.log(pattern.test("hip")); // false
//*    \d: Збігає будь-яку цифру
//         const pattern = /\d\d-\d\d-\d\d\d\d/; // Збігає з форматом дати "dd-dd-dddd" (наприклад, "01-15-2022")
//         console.log(pattern.test("01-15-2022")); // true
//         console.log(pattern.test("12-31-99")); // false
//*    \w: Збігає будь-яку букву, цифру або символ підкреслення
//         const pattern = /\w+/; // Збігає з одним або більше буквою, цифрою або символом підкреслення
//         console.log(pattern.test("hello")); // true
//         console.log(pattern.test("123")); // true
//         console.log(pattern.test("Hello_World")); // true
//*    +: Збігає одне або більше повторення попереднього шаблону   //    Відповідає одному або більше повторень попереднього символу або групи символів
//         const pattern = /lo+/; // Збігає з "lo", "loo", "looo" і т.д.
//         console.log(pattern.test("lo")); // true
//         console.log(pattern.test("loo")); // true
//         console.log(pattern.test("hello")); //! false
//*    *: Збігає нуль або більше повторень попереднього шаблону   //   Відповідає нулю або більше повторень попереднього символу або групи символів
//*    ?: Робить попередній символ або групу символів необов'язковим.
//*    ^: Вказує на початок рядка.
//*    $: Вказує на кінець рядка.
//?    []: Збігає будь-який символ з набору вказаних в дужках.
//        const pattern = /[aeiou]/; // Збігає з будь-якою голосною буквою
//        console.log(pattern.test("apple")); // true
//        console.log(pattern.test("banana")); // true
//        console.log(pattern.test("orange")); // false
//*       [AEIOUaeiou] відповідає будь-якій голосній букві.
//*       [0-9] відповідає будь-якій цифрі від 0 до 9.
//*       [a-zA-Z] відповідає будь-якій латинській букві в будь-якому регістрі.
//*       Можна комбінувати символи та діапазони:
//*       [AEIOUaeiou0 - 9]  - відповідає будь-якій голосній букві або цифрі від 0 до 9.
//*    |: Вказує альтернативу, яка збігається з одним з наборів шаблонів.
//* "збігає" означає перевірку на відповідність регулярному виразу
//! ================================================================================================
//? модифікатори вказуються після закритого слешу / та визначають спосіб співставлення з рядком
//* gi - це комбінація двох модифікаторів:
//*     g: Global (глобальний) модифікатор, який означає пошук всіх входжень регулярного виразу у всьому рядку, а не тільки першого входження.
//*     i: Case-insensitive (регістронезалежний) модифікатор, який означає, що в пошуку не враховується регістр (великі або маленькі літери).
//* Отже, вираз /[aeiou]/gi вказує на пошук всіх голосних літер у рядку str, незалежно від їх регістру (великі або маленькі літери).
//*        Після знаходження голосних літер використовується метод replace для їх видалення з рядка
//! ================================================================================================
//?   Інкремент: x++ або ++x. Ці оператори збільшують значення змінної x на 1.
//?   Декремент: x-- або --x. Ці оператори зменшують значення змінної x на 1.
//* Префіксний інкремент або декремент: ++x або --x. Ці оператори збільшують або зменшують значення змінної x на 1 перед використанням її у виразі.
//* Постфіксний інкремент або декремент: x++ або x--. Ці оператори збільшують або зменшують значення змінної x на 1 після використання її у виразі.
//          let x = 5;
//          console.log(x++);  // Виведе 5
//          console.log(x);    // Виведе 6

//          let y = 10;
//          console.log(--y);  // Виведе 9
//          console.log(y);    // Виведе 9
//* У першому випадку, коли використовується постфіксний інкремент x++, спочатку виводиться значення x (5), а потім відбувається збільшення x на 1.
//* У другому випадку, коли використовується префіксний декремент--y, спочатку відбувається зменшення y на 1, а потім виводиться значення y(9).
